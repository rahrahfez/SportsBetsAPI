// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace SportsBetsServer.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20200131203852_InitialAdd")]
    partial class InitialAdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Models.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("bet");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user");

                    b.Property<Guid>("WagerId")
                        .HasColumnName("wager");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WagerId");

                    b.ToTable("bet");
                });

            modelBuilder.Entity("Entities.Models.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("user");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnName("password_salt");

                    b.HasKey("Id");

                    b.ToTable("credential");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedNever()
                        .HasColumnName("user");

                    b.Property<int>("AvailableBalance")
                        .HasColumnName("available_balance");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Entities.Models.Wager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedNever()
                        .HasColumnName("wager");

                    b.Property<int>("Amount")
                        .HasColumnName("amount");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnName("date_created");

                    b.Property<string>("Result")
                        .HasColumnName("result");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("status");

                    b.Property<string>("WinCondition")
                        .IsRequired()
                        .HasColumnName("win_condition");

                    b.HasKey("Id");

                    b.ToTable("wager");
                });

            modelBuilder.Entity("Entities.Models.Bet", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Bet")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Models.Wager", "Wager")
                        .WithMany("Bet")
                        .HasForeignKey("WagerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Entities.Models.Credential", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
